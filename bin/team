#!/usr/bin/env ruby

require 'pp'

input = [['9:00', '9:30'], ['9:00', '11:30'], ['10:00', '11:00'], ['2:30', '3:00'], ['2:30', '3:30']]

start_time = 8.5

end_time = 17

lunch = [ 12.0, 13.0 ]

def time_to_number(s)
  h, m = s.split(':').map(&:to_f)
  h + m / 60
end

def to_time(n)
  n = n - 12 if n > 12
  digit = ((n - n.floor) * 60).to_i

  digit = "00" if digit == 0
  "#{(n.floor)}:#{digit}"
end

def display(input)
  puts input.map { |r| "[#{r.join(',')}]" }.join(', ')
end

def is_overlap(r1, r2)
  # puts "#{(r1[0] < r2[1]) && (r1[1] > r2[0])} [#{r1.join(',')}] [#{r2.join(',')}]"
  (r1[0] < r2[1]) && (r2[0] < r1[1])
end


def behind(r1, r2)
  r2[1] <= r1[0]
end

input = input.map do |r|
  r.map { |i| time_to_number(i) }
end

break_index = 0

1.upto(input.length - 1).each do |i|
  if(input[i-1][0] > input[i][0])
    break_index = i
    break
  end
end


break_index.upto(input.length - 1).each do |i|
  input[i] = input[i].map { |a| a + 12 }
end

display(input)



result = []
while true do
  break if start_time + 0.5 > end_time
  current = [start_time, start_time + 0.5 ]

  overlap = input.find { |r| is_overlap(current, r) || is_overlap(current, lunch)  }

  if !overlap
    result.push(current.map { |i| to_time(i)} )
  end

  start_time += 0.5


end

display(result)

pp(result)
